/*Full Adder Verilog Code*/
 module fulladder(a, b, c, sum, carry);
 input a, b, c;
 output sum, carry;
 wire sum, carry;
 assign sum = a^b^c; //sum bit
 assign carry = ((a&b) | (b&c) | (a&c)); //carry bit
 endmodule

 /* Test bench for Full Adder */
 module main;
 reg a, b, c;
 wire sum, carry;
 fulladder add(a, b, c, sum, carry);
 always @(sum or carry)
 begin
 $dumpfile("add.vcd");
 $dumpvars(0, add);
 $display("Input A= %b B= %b C= %b Sum = %b Carry = %b\n", a, b, c, sum, carry);
 end
 initial begin

 a= 0; b= 0; c= 0;
 #5
 a= 0; b= 0; c= 1;
 #5
 a= 0; b= 1; c= 0;
 #5
 a= 0; b= 1; c= 1;
 #5
 a= 1; b= 0; c= 0;
 #5
 a= 1; b= 0; c= 1;
 #5
 a= 1; b= 1; c= 0;
 #5
 a= 1; b= 1; c= 1;
 end
 endmodule